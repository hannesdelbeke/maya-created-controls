    //the script is written by stac9350 
    //connection :
    //telegram - @stac9350
    //mail - stac9350@gmail.com
    //Creation Date:		leta 7532.07 (June - 2024)
    //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////                               ////////////////////////////////////////////////////////
    /////////////////////////////////////////////////            BUTTONS            ////////////////////////////////////////////////////////
    /////////////////////////////////////////////////                               ////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // all inpust 
    float $colorR,$colorG,$colorB;
    string $put = "C:/Users/H/Documents/maya/2026/scripts/";
    string $Buts = "";
    
   // NewContr ($put,$Buts);
   // button_1 ($colorR, $colorG, $colorB);

    // Burron Created Controls///////////////////////
      global proc NewContr (string $put, string $Buts){
        $select = `ls -sl`;
        $Sselect = `size($select)`;
        int $selSc= `floatField -q -v ScaleInpCtr`;

       if ($Sselect>=1) //selected 1 ///////////////
        for ($i=0; $i<$Sselect; $i++){
          {file -import -type "FBX" -importTimeRange "override" ($put + "Control_tools/Controls/" + $Buts + ".fbx") ;
          setAttr ($Buts + ".scaleX") $selSc;
          setAttr ($Buts + ".scaleY") $selSc;
          setAttr ($Buts + ".scaleZ") $selSc;
         select $Buts;
         channelBoxCommand -freezeScale;
         if (`checkBox -q -v CheckBoxGRP`) //IF SELECT "IN GRP"
            {
            select -cl;
            string $newGRP_1 = `group -em `;
            xform -os -piv 0 0 0;
            string $newGRP_2 = `group -em `;
            xform -os -piv 0 0 0;
            parent $Buts $newGRP_1;
            parent $newGRP_1 $newGRP_2;
            select $select[$i];
            select -tgl null2;
            doCreateParentConstraintArgList 1 { "0","0","0","0","0","0","0","0","1","","1" };
            select null2_parentConstraint1;
            delete ;
            }
            else {
                select $select[$i];
                select -tgl $Buts;
                doCreateParentConstraintArgList 1 { "0","0","0","0","0","0","0","0","1","","1" };
                select ($Buts + "_parentConstraint1");
                delete ;
            }
         if (`checkBox -q -v CheckBoxParent`) //  PARENT  ///////////////////
            {
            select $Buts;
            select -add $select[$i];
            doCreateParentConstraintArgList 1 { "1","0","0","0","0","0","0","0","1","","1" };
            }
         if (`checkBox -q -v CheckBoxPoint`)  //  POINT  /////////////////////
            {
            select $Buts;
            select -add $select[$i];
            doCreatePointConstraintArgList 1 { "1","0","0","0","0","0","0","1","","1" };
            }
         if (`checkBox -q -v CheckBoxOrient`) //  ORIENT  ///////////////////
            {
            select $Buts;
            select -add $select[$i];
            doCreateOrientConstraintArgList 1 { "1","0","0","0","0","0","0","1","","1" };
            }
         if (`checkBox -q -v CheckBoxScale`)  //  SCALE  /////////////////////
            {
            select $Buts;
            select -add $select[$i];
            doCreateScaleConstraintArgList 1 { "1","1","1","1","0","0","0","1","","1" };
            } 
         select $Buts; 
         if (`checkBox -q -v SelectName`)     //  NAME  ///////////////////
          {
          string $rename = $select[$i];
          rename $Buts ("C_" + $rename);
          if (`checkBox -q -v CheckBoxGRP`) //GRP //////
                {
                rename null1 ("GRP_" + $rename + "_Transform");
                rename null2 ("GRP_" + $rename);  
                } 
          }
         else{
            string $rename = `textFieldGrp -q -tx Rename_Text_FielGRP`;
            rename $Buts ("C_" + $rename);
            if (`checkBox -q -v CheckBoxGRP`) //GRP //////
                {
                rename null1 ("GRP_" + $rename + "_Transform");
                rename null2 ("GRP_" + $rename);  
                } 
            }
         }
         } 
       else //selected 0 /////////////////////////// 
            {
            file -import -type "FBX" -importTimeRange "override" ($put + "Control_tools/Controls/" + $Buts + ".fbx") ;
            setAttr ($Buts + ".scaleX") $selSc;
            setAttr ($Buts + ".scaleY") $selSc;
            setAttr ($Buts + ".scaleZ") $selSc;
            select $Buts;
            channelBoxCommand -freezeScale;
            if (`checkBox -q -v CheckBoxGRP`) //IF SELECT "IN GRP" 
                {
                select -cl;
                string $newGRP_1 = `group -em `;
                xform -os -piv 0 0 0;
                string $newGRP_2 = `group -em `;
                xform -os -piv 0 0 0;
                parent $Buts $newGRP_1;
                parent $newGRP_1 $newGRP_2;
                string $rename = `textFieldGrp -q -tx Rename_Text_FielGRP`;
                // Name //////////
                rename $Buts ("C_" +$rename);
                rename null1 ("GRP_" + $rename + "_Transform");
                rename null2 ("GRP_" + $rename);
                }      
             else{
              // NAME /////////
              string $rename = `textFieldGrp -q -tx Rename_Text_FielGRP`;
              rename $Buts ("C_" + $rename);
              }
            
             }
        } 

        
    // Buttons Colors ///////////////////////////////
        global proc reset_Button (){
            $sel=`ls -sl -long`;
            for ($i=0; $i < size($sel); $i++ ){ 
            setAttr ($sel[$i] + ".overrideEnabled") 1;  
            setAttr ($sel[$i] + ".overrideRGBColors") 0;
            setAttr ($sel[$i] + ".overrideColorRGB") 0 0 0;
            setAttr ($sel[$i] + ".overrideEnabled") 0;  
            setAttr ($sel[$i] + ".useOutlinerColor") 0;  
            setAttr ($sel[$i] + ".outlinerColor") 0 0 0 ;
            } 
            }
        global proc button_1(float $colorR, float $colorG, float $colorB){
            $sel=`ls -sl -long`;
            for ($i=0; $i < size($sel); $i++ ){ 
            setAttr ($sel[$i] + ".overrideEnabled") 1;  
            setAttr ($sel[$i] + ".overrideRGBColors") 1;
            setAttr ($sel[$i] + ".overrideColorRGB") $colorR $colorG $colorB; 
            if (`checkBox -q -v chkBox_outliner`){
                setAttr ($sel[$i] + ".useOutlinerColor") 1;  
                setAttr ($sel[$i] + ".outlinerColor") $colorR $colorG $colorB;
                }
            }
            }
    // Buttons Mirror and Locks /////////////////////  
    //Select lockALL- Lock X or Y or Z   
        global proc CheckBoxTr_s(){
        if (`checkBox -q -v Tr_Lok_off_on`){
                checkBox -e -v 1 TrX_Lok_off_on;
                checkBox -e -v 1 TrY_Lok_off_on;
                checkBox -e -v 1 TrZ_Lok_off_on;
            }
        else{
                checkBox -e -v 0 TrX_Lok_off_on;
                checkBox -e -v 0 TrY_Lok_off_on;
                checkBox -e -v 0 TrZ_Lok_off_on;
            }
        }
        global proc CheckBoxRt_s(){
        if (`checkBox -q -v Rt_Lok_off_on`){
                checkBox -e -v 1 RtX_Lok_off_on;
                checkBox -e -v 1 RtY_Lok_off_on;
                checkBox -e -v 1 RtZ_Lok_off_on;
            }
        else{
                checkBox -e -v 0 RtX_Lok_off_on;
                checkBox -e -v 0 RtY_Lok_off_on;
                checkBox -e -v 0 RtZ_Lok_off_on;
            }
        }
        global proc CheckBoxSc_s() {
        if (`checkBox -q -v Sc_Lok_off_on`){
                checkBox -e -v 1 ScX_Lok_off_on;
                checkBox -e -v 1 ScY_Lok_off_on;
                checkBox -e -v 1 ScZ_Lok_off_on;
            }
        else{
                checkBox -e -v 0 ScX_Lok_off_on;
                checkBox -e -v 0 ScY_Lok_off_on;
                checkBox -e -v 0 ScZ_Lok_off_on;
            }
        }
    //Commands to check locks on the selected object
        global proc All_lock_on_off(){  
            //Translate_XYZ//////////////////////////////////     
                $sel =`ls -sl`;
                select -cl;
                $seltrX = $sel[0] + ".translateX";
                    int $locktrX = `getAttr -lock $seltrX`;
                    select $sel[0];
                    print $locktrX;
                    if ($locktrX == 0){ checkBox -e -v 0 TrX_Lok_off_on; }
                    else{ checkBox -e -v 1 TrX_Lok_off_on; }    
                $seltrY = $sel[0] + ".translateY";
                    int $locktrY = `getAttr -lock $seltrY`;
                    select $sel[0];
                    print $locktrY;
                    if ($locktrY == 0){ checkBox -e -v 0 TrY_Lok_off_on; }
                    else { checkBox -e -v 1 TrY_Lok_off_on; }    
                $seltrZ = $sel[0] + ".translateZ";
                    int $locktrZ = `getAttr -lock $seltrZ`;
                    select $sel[0];
                    print $locktrZ;
                    if ($locktrZ == 0) { checkBox -e -v 0 TrZ_Lok_off_on; }
                    else { checkBox -e -v 1 TrZ_Lok_off_on; }
            //Rotate_XYZ////////////////////////////////////
                $selrtX = $sel[0] + ".rotateX";
                    int $lockrtX = `getAttr -lock $selrtX`;
                    select $sel[0];
                    print $lockrtX;
                    if ($lockrtX == 0){ checkBox -e -v 0 RtX_Lok_off_on;}
                    else { checkBox -e -v 1 RtX_Lok_off_on; }
                $selrtY = $sel[0] + ".rotateY";
                    int $lockrtY = `getAttr -lock $selrtY`;
                    select $sel[0];
                    print $lockrtY;
                    if ($lockrtY == 0){checkBox -e -v 0 RtY_Lok_off_on;}
                    else { checkBox -e -v 1 RtY_Lok_off_on; }
                $selrtZ = $sel[0] + ".rotateZ";
                    int $lockrtZ = `getAttr -lock $selrtZ`;
                    select $sel[0];
                    print $lockrtZ;
                    if ($lockrtZ == 0){ checkBox -e -v 0 RtZ_Lok_off_on; }
                    else { checkBox -e -v 1 RtZ_Lok_off_on; }
            //Scale_XYZ/////////////////////////////////////
                $selscX = $sel[0] + ".scaleX";
                    int $lockscX = `getAttr -lock $selscX`;
                    select $sel[0];
                    print $lockscX;
                    if ($lockscX == 0){checkBox -e -v 0 ScX_Lok_off_on; }
                    else { checkBox -e -v 1 ScX_Lok_off_on; }
                $selscY = $sel[0] + ".scaleY";
                    int $lockscY = `getAttr -lock $selscY`;
                    select $sel[0];
                    print $lockscY;
                    if ($lockscY == 0)
                    { checkBox -e -v 0 ScY_Lok_off_on; }
                    else{ checkBox -e -v 1 ScY_Lok_off_on;}
                $selscZ = $sel[0] + ".scaleZ";
                    int $lockscZ = `getAttr -lock $selscZ`;
                    select $sel[0];
                    print $lockscZ;
                    if ($lockscZ == 0){ checkBox -e -v 0 ScZ_Lok_off_on;}
                    else{ checkBox -e -v 1 ScZ_Lok_off_on; }
            }
    // Commands for mirroring controls
        global proc  comandMirror(string $comande){
            $selectC= `ls -sl`;
            doGroup 0 1 1 ;
                if($comande=="scaleX")
                            setAttr "group1.scaleX" -1;
                    else if($comande=="scaleY")
                            setAttr "group1.scaleY" -1;
                    else if($comande=="scaleZ")
                            setAttr "group1.scaleZ" -1;
            select -cl;
            select $selectC;
            parent -w ;
            select group1;
            doDelete;
        }
    // Commands for translate, rotate, scale - lock/unlock  
       //  XYZ ////////////////////////////////////////////////
        global proc Tr_lock_on(){
            $selecte = `ls -sl`;
            setAttr -l true  -typ $selecte ".tx";
            setAttr -l true  -typ $selecte ".ty";
            setAttr -l true  -typ $selecte ".tz";
         }

        global proc Tr_lock_off(){
            $selecte = `ls -sl`;
            setAttr -l false  -typ $selecte ".tx";
            setAttr -l false  -typ $selecte ".ty";
            setAttr -l false  -typ $selecte ".tz";
         }
        //
        global proc Rt_lock_on(){
            $selecte = `ls -sl`;
            setAttr -l true  -typ $selecte ".rx";
            setAttr -l true  -typ $selecte ".ry";
            setAttr -l true  -typ $selecte ".rz";  
         }

        global proc Rt_lock_off() {
            $selecte = `ls -sl`;
            setAttr -l false  -typ $selecte ".rx";
            setAttr -l false  -typ $selecte ".ry";
            setAttr -l false  -typ $selecte ".rz";   
         }
        //
        global proc Sc_lock_on(){
            $selecte = `ls -sl`;
            setAttr -l true  -typ $selecte ".sx";
            setAttr -l true  -typ $selecte ".sy";
            setAttr -l true  -typ $selecte ".sz";  
         }
        global proc Sc_lock_off(){
            $selecte = `ls -sl`;
            setAttr -l false  -typ $selecte ".sx";
            setAttr -l false  -typ $selecte ".sy";
            setAttr -l false  -typ $selecte ".sz";   
         }
       // X //////////////////////////////////////////////////
        global proc TrX_lock_on(){
         $selecte = `ls -sl`;
         setAttr -l true  -typ $selecte ".tx";
         }
        global proc TrX_lock_off(){
         $selecte = `ls -sl`;
         setAttr -l false  -typ $selecte ".tx";
         }
        //
        global proc RtX_lock_on(){
         $selecte = `ls -sl`;
         setAttr -l true  -typ $selecte ".rx";
         }
        global proc RtX_lock_off(){
         $selecte = `ls -sl`;
         setAttr -l false  -typ $selecte ".rx";
         }
        //
        global proc ScX_lock_on(){
         $selecte = `ls -sl`;
         setAttr -l true  -typ $selecte ".sx";
         }
        global proc ScX_lock_off(){
         $selecte = `ls -sl`;
         setAttr -l false  -typ $selecte ".sx";
         }
       // Y //////////////////////////////////////////////////
        global proc TrY_lock_on(){
         $selecte = `ls -sl`;
         setAttr -l true  -typ $selecte ".ty";
         }
        global proc TrY_lock_off(){
         $selecte = `ls -sl`;
         setAttr -l false  -typ $selecte ".ty";
         }
        //
        global proc RtY_lock_on(){
         $selecte = `ls -sl`;
         setAttr -l true  -typ $selecte ".ry";
         }
        global proc RtY_lock_off(){
         $selecte = `ls -sl`;
         setAttr -l false  -typ $selecte ".ry";
         }
        //
        global proc ScY_lock_on(){
         $selecte = `ls -sl`;
         setAttr -l true  -typ $selecte ".sy";
         }
        global proc ScY_lock_off(){
         $selecte = `ls -sl`;
         setAttr -l false  -typ $selecte ".sy";
         }
       // Z /////////////////////////////////////////////////
        global proc TrZ_lock_on(){
         $selecte = `ls -sl`;
         setAttr -l true  -typ $selecte ".tz";
         }
        global proc TrZ_lock_off(){
         $selecte = `ls -sl`;
         setAttr -l false  -typ $selecte ".tz";
         }
        //
        global proc RtZ_lock_on(){
         $selecte = `ls -sl`;
         setAttr -l true  -typ $selecte ".rz";
         }
        global proc RtZ_lock_off(){
         $selecte = `ls -sl`;
         setAttr -l false  -typ $selecte ".rz";
         }
        //
        global proc ScZ_lock_on(){
         $selecte = `ls -sl`;
         setAttr -l true  -typ $selecte ".sz";
         }
        global proc ScZ_lock_off(){
         $selecte = `ls -sl`;
         setAttr -l false  -typ $selecte ".sz";
         }  
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////                               ////////////////////////////////////////////////////////
    /////////////////////////////////////////////////            Window             ////////////////////////////////////////////////////////
    /////////////////////////////////////////////////                               ////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    global proc Created_Controls_win (string $put){
    window -rtf true -title "Controls" -w 280;
    //Name
     columnLayout;
        frameLayout -l "                                        Name";
            rowColumnLayout -numberOfColumns 1 -columnWidth 1 280;
            textFieldGrp -label "Rename:" -text "" -columnWidth 1 60 -columnWidth 2 200 Rename_Text_FielGRP;
        rowLayout -numberOfColumns 2 -columnWidth3 250 50 50;
                        text "                                ";//center
        checkBox -onc old_name -ofc new_name -label "Selected Name" SelectName;        
        setParent..;
    //Icons
     columnLayout;         
            frameLayout -l "                                     Controls";
      rowLayout -nc 5 ;
            text "            ";
            checkBox -label "Parent"
                -onCommand "on" -offCommand "off" CheckBoxParent;
            checkBox -label "Point"
                -onCommand "on" -offCommand "off" CheckBoxPoint;
            checkBox -label "Orient"
                -onCommand "on" -offCommand "off" CheckBoxOrient;
            checkBox -label "Scale"
                -onCommand "on" -offCommand "off" CheckBoxScale;
        setParent..;
      rowLayout -nc 4;
            text "            ";
            floatField -minValue -10 -maxValue 100 -value 1 ScaleInpCtr ;
            text "Scale control            ";
            checkBox -label "GRP"
                -onCommand "" 
                -offCommand "" 
                CheckBoxGRP;
        setParent..;
    //Inport controls
     gridLayout -nc 7 -cwh 40 40; 
        //A
            symbolButton -i ($put + "Control_tools/Icons/A1") -c "NewContr($put, \"A_1\")" A_1;
            symbolButton -i ($put + "Control_tools/Icons/A2") -c "NewContr($put, \"A_2\")" A_2;
            symbolButton -i ($put + "Control_tools/Icons/A3") -c "NewContr($put, \"A_3\")" A_3; 
            symbolButton -i ($put + "Control_tools/Icons/A4") -c "NewContr($put, \"A_4\")" A_4;
            symbolButton -i ($put + "Control_tools/Icons/A5") -c "NewContr($put, \"A_5\")" A_5;
            symbolButton -i ($put + "Control_tools/Icons/A6") -c "NewContr($put, \"A_6\")" A_6;
            symbolButton -i ($put + "Control_tools/Icons/A7") -c "NewContr($put, \"A_7\")" A_7;
        //B
            symbolButton -i ($put + "Control_tools/Icons/B1") -c "NewContr($put, \"B_1\")" B1;
            symbolButton -i ($put + "Control_tools/Icons/B2") -c "NewContr($put, \"B_2\")" B2;
            symbolButton -i ($put + "Control_tools/Icons/B3") -c "NewContr($put, \"B_3\")" B3; 
            symbolButton -i ($put + "Control_tools/Icons/B4") -c "NewContr($put, \"B_4\")" B4;
            symbolButton -i ($put + "Control_tools/Icons/B5") -c "NewContr($put, \"B_5\")" B5;
            symbolButton -i ($put + "Control_tools/Icons/B6") -c "NewContr($put, \"B_6\")" B6;
            symbolButton -i ($put + "Control_tools/Icons/B7") -c "NewContr($put, \"B_7\")" B7;
        //C
            symbolButton -i ($put + "Control_tools/Icons/C1") -c "NewContr($put, \"C_1\")" C1;
            symbolButton -i ($put + "Control_tools/Icons/C2") -c "NewContr($put, \"C_2\")" C2;
            symbolButton -i ($put + "Control_tools/Icons/C3") -c "NewContr($put, \"C_3\")" C3; 
            symbolButton -i ($put + "Control_tools/Icons/C4") -c "NewContr($put, \"C_4\")" C4;
            symbolButton -i ($put + "Control_tools/Icons/C5") -c "NewContr($put, \"C_5\")" C5;
            symbolButton -i ($put + "Control_tools/Icons/C6") -c "NewContr($put, \"C_6\")" C6;
            symbolButton -i ($put + "Control_tools/Icons/C7") -c "NewContr($put, \"C_7\")" C7;
        //D
            symbolButton -i ($put + "Control_tools/Icons/D1") -c "NewContr($put, \"D_1\")" D1;
            symbolButton -i ($put + "Control_tools/Icons/D2") -c "NewContr($put, \"D_2\")"  D2;
            symbolButton -i ($put + "Control_tools/Icons/D3") -c "NewContr($put, \"D_3\")"  D3; 
            symbolButton -i ($put + "Control_tools/Icons/D4") -c "NewContr($put, \"D_4\")"  D4;
            symbolButton -i ($put + "Control_tools/Icons/D5") -c "NewContr($put, \"D_5\")"  D5;
            symbolButton -i ($put + "Control_tools/Icons/D6") -c "NewContr($put, \"D_6\")"  D6;
            symbolButton -i ($put + "Control_tools/Icons/D7") -c "NewContr($put, \"D_7\")"  D7;
        //E
            symbolButton -i ($put + "Control_tools/Icons/E1") -c "NewContr($put, \"E_1\")"  E1;
            symbolButton -i ($put + "Control_tools/Icons/E2") -c "NewContr($put, \"E_2\")" E2;
            symbolButton -i ($put + "Control_tools/Icons/E3") -c "NewContr($put, \"E_3\")" E3; 
            symbolButton -i ($put + "Control_tools/Icons/E4") -c "NewContr($put, \"E_4\")" E4;
            symbolButton -i ($put + "Control_tools/Icons/E5") -c "NewContr($put, \"E_5\")" E5;
            symbolButton -i ($put + "Control_tools/Icons/E6") -c "NewContr($put, \"E_6\")" E6;
            symbolButton -i ($put + "Control_tools/Icons/E7") -c "NewContr($put, \"E_7\")" E7;
        //F
            symbolButton -i ($put + "Control_tools/Icons/F1") -c "NewContr($put, \"F_1\")" F1;
            symbolButton -i ($put + "Control_tools/Icons/F2") -c "NewContr($put, \"F_2\")" F2;
            symbolButton -i ($put + "Control_tools/Icons/F3") -c "NewContr($put, \"F_3\")" F3; 
            symbolButton -i ($put + "Control_tools/Icons/F4") -c "NewContr($put, \"F_4\")" F4;
            symbolButton -i ($put + "Control_tools/Icons/F5") -c "NewContr($put, \"F_5\")" F5;
            symbolButton -i ($put + "Control_tools/Icons/F6") -c "NewContr($put, \"F_6\")" F6;
            symbolButton -i ($put + "Control_tools/Icons/F7") -c "NewContr($put, \"F_7\")" F7;
        setParent..;
    //Colors 
    columnLayout;
        frameLayout -l "                                       Colors";
            gridLayout -nc 10 -cwh 31 23;
            button -l "" -bgc 1 1 1 -c "button_1 (1,1,1)" Button1 ;
            button -l "" -bgc 1 0 0 -c "button_1 (1,0,0)" Button2;
            button -l "" -bgc 1 0.3 0 -c "button_1 (1,0.3,0)" Button3;
            button -l "" -bgc 1 1 0 -c "button_1 (1,1,0)" Button4;
            button -l "" -bgc 0 1 0 -c "button_1 (0,1,0)" Button5 ;
            button -l "" -bgc 0 1 1 -c "button_1 (0,1,1)" Button6;
            button -l "" -bgc 0 0 1 -c "button_1 (0,0,1)" Button7;
            button -l "" -bgc 1 0 1 -c "button_1 (1,0,1)" Button8;
            button -l "" -bgc 0 0 0 -c "button_1 (0,0,0)" Button9;
        setParent..;
    columnLayout;
        rowLayout -numberOfColumns 3 ;
            text "                             ";
                checkBox -label "Outliner"
                -onCommand "on_func"
                -offCommand "off_func"
                chkBox_outliner;
                
            button -l "Reset" -c "reset_Button" resetButton ;
        setParent..;
        text "________________________________________________________________________";
    // MIrror and Locks
        columnLayout -height 150;  //Bug required explicit defining the height to avoid clipping in UI 
        rowLayout -nc 2;
            text "                Lock                                 ";
            button -label "Miror control" -c "comandMirror($controlSelect)" ;
        setParent..;
        
        gridLayout -numberOfColumns 5 -cellWidthHeight 50 20 -autoGrow true;
        radioCollection;
                string $controlSelect="scaleX";
                // ROW 1
                checkBox -cc"CheckBoxTr_s" -onc Tr_lock_on -ofc Tr_lock_off -l "Tr" Tr_Lok_off_on;
                checkBox -cc"CheckBoxRt_s" -onc Rt_lock_on -ofc Rt_lock_off -l "Rt" Rt_Lok_off_on;
                checkBox -cc"CheckBoxSc_s" -onc Sc_lock_on -ofc Sc_lock_off -l "Sc" Sc_Lok_off_on;
                text"      ";
                radioButton -sl -l "X" -cc "$controlSelect=\"scaleX\"";

                // ROW 2
                checkBox -onc TrX_lock_on -ofc TrX_lock_off -l "X" TrX_Lok_off_on;
                checkBox -onc RtX_lock_on -ofc RtX_lock_off -l "X" RtX_Lok_off_on;
                checkBox -onc ScX_lock_on -ofc ScX_lock_off -l "X" ScX_Lok_off_on;
                text"      ";
                radioButton -l "Y" -cc "$controlSelect=\"scaleY\"";
                
                // ROW 3
                checkBox -onc TrY_lock_on -ofc TrY_lock_off -l "Y" TrY_Lok_off_on;
                checkBox -onc RtY_lock_on -ofc RtY_lock_off -l "Y" RtY_Lok_off_on;
                checkBox -onc ScY_lock_on -ofc ScY_lock_off -l "Y" ScY_Lok_off_on;
                text"      ";
                radioButton -l "Z" -cc "$controlSelect=\"scaleZ\"";
                
                // ROW 4
                checkBox -onc TrZ_lock_on -ofc TrZ_lock_off -l "Z" TrZ_Lok_off_on;
                checkBox -onc RtZ_lock_on -ofc RtZ_lock_off -l "Z" RtZ_Lok_off_on;
                checkBox -onc ScZ_lock_on -ofc ScZ_lock_off -l "Z" ScZ_Lok_off_on;
                text" ";
                button -l "Copy" -c"duplicate -rr;" ;
        setParent..;
    showWindow ;
    }
    
    Created_Controls_win ($put);